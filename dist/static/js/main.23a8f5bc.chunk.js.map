{"version":3,"sources":["types/ticker-value.ts","types/quotation-string-state.ts","QuotationString.tsx","types/currency-item.ts","types/sort-state.ts","QuotationTable.tsx","reportWebVitals.ts","index.tsx"],"names":["TickerValue","ask","bid","last","open","low","high","volume","volumeQuote","timestamp","symbol","QuotationStringState","bidChangedUp","askChangedUp","highChangedUp","lowChangedUp","lastChangedUp","bidChangedDown","askChangedDown","highChangedDown","lowChangedDown","lastChangedDown","QuotationString","props","label","prevValue","resetState","symbolData","baseCurrency","quoteCurrency","prevProps","JSON","stringify","this","detectChanges","setTimeout","setState","state","currentProps","parseFloat","currentValue","propName","className","getPropClassName","React","Component","CurrencyItem","SortState","sortColumn","sortDirectionUp","QuotationTable","socketConnection","currenciesList","currenciesListToDisplay","timerID","currentSort","colorState","sliceCurrenciesByLastNumber","initSocketConnection","getCurrenciesList","forEach","currencyItem","sendSubscribeRequest","id","data","messageData","parse","params","undefined","setInterval","tick","clearInterval","sendDataRequest","currenciesResponse","result","map","currencyObject","item","Promise","resolve","reject","WebSocket","addEventListener","event","console","error","onopen","onclose","requestObject","onmessage","message","onerror","send","handlerFn","sliceCurrenciesListByLast","sortCurrenciesListByCurrentSort","size","sort","a","b","slice","colName","onClick","wrapColors","setShowAll","setShowTop50ByLast","getTableClass","setSortBy","getColumnSortArrow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAAaA,EAAb,sCACWC,IAAc,IADzB,KAEWC,IAAc,IAFzB,KAGWC,KAAe,IAH1B,KAIWC,KAAe,IAJ1B,KAKWC,IAAc,IALzB,KAMWC,KAAe,IAN1B,KAOWC,OAAiB,IAP5B,KAQWC,YAAsB,IARjC,KASWC,UAAoB,IAT/B,KAUWC,YAVX,GCAaC,G,MAAb,sCACWC,cAAwB,EADnC,KAEWC,cAAwB,EAFnC,KAGWC,eAAyB,EAHpC,KAIWC,cAAwB,EAJnC,KAKWC,eAAyB,EALpC,KAMWC,gBAA0B,EANrC,KAOWC,gBAA0B,EAPrC,KAQWC,iBAA2B,EARtC,KASWC,gBAA0B,EATrC,KAUWC,iBAA2B,IC8GvBC,E,kDA7GX,WAAYC,GAAsB,IAAD,8BAC7B,cAAMA,IALFC,WAIyB,IAFzBC,UAAiB,KAKrB,EAAKC,aAEL,EAAKF,MAAQ,EAAKD,MAAMI,WAAWC,aAAe,IAAM,EAAKL,MAAMI,WAAWE,cALjD,E,+DAQdC,GAAiB,IAAD,OAC3BC,KAAKC,UAAUC,KAAKV,SAAWQ,KAAKC,UAAUF,KAC9CG,KAAKC,cAAcD,KAAKV,MAAOO,GAE/BK,YAAW,WACP,EAAKT,aACL,EAAKU,SAAS,EAAKC,SACpB,Q,mCAKPJ,KAAKI,MAAQ,IAAI1B,I,oCAGP2B,EAA4BR,GACtCG,KAAKG,SAAS,CACVxB,aAAc2B,WAAWD,EAAaE,aAAatC,KAAOqC,WAAWT,EAAUU,aAAatC,KAC5FW,aAAc0B,WAAWD,EAAaE,aAAavC,KAAOsC,WAAWT,EAAUU,aAAavC,KAC5Fa,cAAeyB,WAAWD,EAAaE,aAAalC,MAAQiC,WAAWT,EAAUU,aAAalC,MAC9FS,aAAcwB,WAAWD,EAAaE,aAAanC,KAAOkC,WAAWT,EAAUU,aAAanC,KAC5FW,cAAeuB,WAAWD,EAAaE,aAAarC,MAAQoC,WAAWT,EAAUU,aAAarC,MAC9Fc,eAAgBsB,WAAWD,EAAaE,aAAatC,KAAOqC,WAAWT,EAAUU,aAAatC,KAC9FgB,eAAgBqB,WAAWD,EAAaE,aAAavC,KAAOsC,WAAWT,EAAUU,aAAavC,KAC9FkB,gBAAiBoB,WAAWD,EAAaE,aAAalC,MAAQiC,WAAWT,EAAUU,aAAalC,MAChGc,eAAgBmB,WAAWD,EAAaE,aAAanC,KAAOkC,WAAWT,EAAUU,aAAanC,KAC9FgB,gBAAiBkB,WAAWD,EAAaE,aAAarC,MAAQoC,WAAWT,EAAUU,aAAarC,U,gDAKpG,OAAO4B,KAAKC,UAAUC,KAAKV,MAAMiB,gBAAkBT,KAAKC,UAAUC,KAAKR,a,uCAG1DgB,GAEb,GAAiB,QAAbA,EAAoB,CACpB,GAAIR,KAAKI,MAAMzB,aACX,MAAO,aAGX,GAAIqB,KAAKI,MAAMpB,eACX,MAAO,eAIf,GAAiB,QAAbwB,EAAoB,CACpB,GAAIR,KAAKI,MAAMxB,aACX,MAAO,aAGX,GAAIoB,KAAKI,MAAMnB,eACX,MAAO,eAIf,GAAiB,SAAbuB,EAAqB,CACrB,GAAIR,KAAKI,MAAMvB,cACX,MAAO,aAGX,GAAImB,KAAKI,MAAMlB,gBACX,MAAO,eAIf,GAAiB,QAAbsB,EAAoB,CACpB,GAAIR,KAAKI,MAAMtB,aACX,MAAO,aAGX,GAAIkB,KAAKI,MAAMjB,eACX,MAAO,eAIf,GAAiB,SAAbqB,EAAqB,CACrB,GAAIR,KAAKI,MAAMrB,cACX,MAAO,aAGX,GAAIiB,KAAKI,MAAMhB,gBACX,MAAO,eAIf,MAAO,K,+BAIP,OAAQ,+BACJ,6BAAKY,KAAKT,QACV,oBAAIkB,UAAWT,KAAKU,iBAAiB,OAArC,SAA8CV,KAAKV,MAAMiB,aAAatC,IAAM+B,KAAKV,MAAMiB,aAAatC,IAAM,MAC1G,oBAAIwC,UAAWT,KAAKU,iBAAiB,OAArC,SAA8CV,KAAKV,MAAMiB,aAAavC,IAAMgC,KAAKV,MAAMiB,aAAavC,IAAM,MAC1G,oBAAIyC,UAAWT,KAAKU,iBAAiB,QAArC,SAA+CV,KAAKV,MAAMiB,aAAalC,KAAO2B,KAAKV,MAAMiB,aAAalC,KAAO,MAC7G,oBAAIoC,UAAWT,KAAKU,iBAAiB,OAArC,SAA8CV,KAAKV,MAAMiB,aAAanC,IAAM4B,KAAKV,MAAMiB,aAAanC,IAAM,MAC1G,oBAAIqC,UAAWT,KAAKU,iBAAiB,QAArC,SAA+CV,KAAKV,MAAMiB,aAAarC,KAAO8B,KAAKV,MAAMiB,aAAarC,KAAO,a,GA9G3FyC,IAAMC,WCFvBC,EAAb,sCACWnB,gBADX,OAEWa,kBAFX,GCHaO,EAAb,sCACWC,WAAqB,KADhC,KAEWC,iBAA2B,GCkRvBC,E,kDAlQX,WAAY3B,GAAa,IAAD,8BACpB,cAAMA,IAXF4B,iBAA8B,KAUd,EAThBC,eAAiC,GASjB,EARhBC,wBAA0C,GAQ1B,EAPhBC,aAOgB,IALhBC,iBAKgB,IAJhBC,WAAqB,KAIL,EAFhBC,4BAAsC,KAI1C,EAAKpB,MAAQ,KACb,EAAKkB,YAAc,IAAIR,EAHH,E,qMAQdd,KAAKyB,uB,uBAEiBzB,KAAK0B,oB,OAAjC1B,KAAKmB,e,OAELnB,KAAKmB,eAAeQ,SAAQ,SAACC,GACzB,EAAKC,qBAAqB,CAClB,OAAU,kBACV,OAAU,CACN,OAAUD,EAAalC,WAAWoC,IAEtC,GAAM,MACP,SAACC,GAEA,IAAIC,EAAclC,KAAKmC,MAAMF,EAAKA,MAAMG,YAEpBC,IAAhBH,GAEA,EAAKb,eAAeQ,SAAQ,SAAAC,GACpBA,EAAalC,WAAWoC,KAAOE,EAAYvD,SAC3CmD,EAAarB,aAAeyB,YAQpDhC,KAAKqB,QAAUe,aACX,kBAAM,EAAKC,SACX,K,mJAKJC,cAActC,KAAKqB,W,4KAIYrB,KAAKuC,gBAAgB,CAChD,OAAU,aACV,OAAU,CACN,OAAU,UAEd,GAAM,M,cALNC,E,OAQArB,EAAkBqB,EAA2BC,O,kBAE1CtB,EAAeuB,KAAI,SAACC,GACvB,IAAMC,EAAO,IAAI/B,EAIjB,OAHA+B,EAAKlD,WAAaiD,EAClBC,EAAKrC,aAAe,IAAIxC,EACxB6E,EAAKrC,aAAa9B,OAASkE,EAAeb,GACnCc,M,iSAMJ,IAAIC,SAAQ,SAACC,EAASC,GACzB,EAAK7B,iBAAmB,IAAI8B,UAAU,2CAEtC,EAAK9B,iBAAiB+B,iBAAiB,SAAS,SAACC,GAC7CC,QAAQC,MAAMF,MAGlB,EAAKhC,iBAAiBmC,OAAS,WAC3BP,EAAQ,EAAK5B,mBAEjB,EAAKA,iBAAiBoC,QAAU,SAACF,GAC7BL,EAAOK,Q,gLAKGG,G,qGACX,IAAIV,SAAQ,SAACC,EAASC,GACzB,EAAK7B,iBAAiBsC,UAAY,SAACC,GAC/BX,EAAQhD,KAAKmC,MAAMwB,EAAQ1B,QAE/B,EAAKb,iBAAiBwC,QAAU,SAACN,GAC7BL,EAAOK,IAGX,EAAKlC,iBAAiByC,KAAK7D,KAAKC,UAAUwD,Q,6IAI7BA,EAAoBK,GACrC5D,KAAKkB,iBAAiBsC,UAAY,SAACzB,GAC/B6B,EAAU7B,IAEd/B,KAAKkB,iBAAiByC,KAAK7D,KAAKC,UAAUwD,M,6BAKtCvD,KAAKwB,4BAA8B,EACnCxB,KAAKoB,wBAA0BpB,KAAK6D,0BAA0B7D,KAAKwB,6BAEnExB,KAAKoB,wBAA0BpB,KAAKmB,eAGxCnB,KAAK8D,kCAEL9D,KAAKG,SAASH,KAAKmB,kB,gDAGG4C,GAStB,OARA/D,KAAKmB,eAAe6C,MAAK,SAACC,EAAGC,GACzB,OAAI5D,WAAW2D,EAAE1D,aAAarC,MAAQoC,WAAW4D,EAAE3D,aAAarC,OACpD,EAED,KAIR8B,KAAKmB,eAAegD,MAAM,EAAGJ,K,wDAGL,IAAD,OAE9B/D,KAAKoB,wBAAwB4C,MAAK,SAACC,EAAGC,GAClC,MAAoC,WAAhC,EAAK5C,YAAYP,WACbkD,EAAE1D,aAAa9B,OAASyF,EAAE3D,aAAa9B,OAChC,EAAK6C,YAAYN,gBAAkB,GAAK,EAExC,EAAKM,YAAYN,iBAAmB,EAAI,EAInB,QAAhC,EAAKM,YAAYP,WACbT,WAAW2D,EAAE1D,aAAatC,KAAOqC,WAAW4D,EAAE3D,aAAatC,KACpD,EAAKqD,YAAYN,gBAAkB,GAAK,EAExC,EAAKM,YAAYN,iBAAmB,EAAI,EAInB,QAAhC,EAAKM,YAAYP,WACbT,WAAW2D,EAAE1D,aAAavC,KAAOsC,WAAW4D,EAAE3D,aAAavC,KACpD,EAAKsD,YAAYN,gBAAkB,GAAK,EAExC,EAAKM,YAAYN,iBAAmB,EAAI,EAInB,SAAhC,EAAKM,YAAYP,WACbT,WAAW2D,EAAE1D,aAAalC,MAAQiC,WAAW4D,EAAE3D,aAAalC,MACrD,EAAKiD,YAAYN,gBAAkB,GAAK,EAExC,EAAKM,YAAYN,iBAAmB,EAAI,EAInB,QAAhC,EAAKM,YAAYP,WACbT,WAAW2D,EAAE1D,aAAanC,KAAOkC,WAAW4D,EAAE3D,aAAanC,KACpD,EAAKkD,YAAYN,gBAAkB,GAAK,EAExC,EAAKM,YAAYN,iBAAmB,EAAI,EAInB,SAAhC,EAAKM,YAAYP,WACbT,WAAW2D,EAAE1D,aAAarC,MAAQoC,WAAW4D,EAAE3D,aAAarC,MACrD,EAAKoD,YAAYN,gBAAkB,GAAK,EAExC,EAAKM,YAAYN,iBAAmB,EAAI,EAIhD,O,gCAILoD,GAEFpE,KAAKsB,YAAYP,aAAeqD,IAChCpE,KAAKsB,YAAYN,iBAAmBhB,KAAKsB,YAAYN,iBAGzDhB,KAAKsB,YAAYP,WAAaqD,I,yCAGfA,GACf,OAAIA,IAAYpE,KAAKsB,YAAYP,WAEzBf,KAAKsB,YAAYN,gBACV,SAGJ,SAGJ,K,sCAIP,MAAwB,UAApBhB,KAAKuB,WACE,GAGJ,gB,mCAIiB,UAApBvB,KAAKuB,WACLvB,KAAKuB,WAAa,OAElBvB,KAAKuB,WAAa,U,mCAKtBvB,KAAKwB,4BAA8B,O,2CAInCxB,KAAKwB,4BAA8B,K,+BAG7B,IAAD,OACL,OACI,gCACI,wBAAQ6C,QAAS,kBAAI,EAAKC,cAA1B,yBACA,wBAAQD,QAAS,kBAAI,EAAKE,cAA1B,sBACA,wBAAQF,QAAS,kBAAI,EAAKG,sBAA1B,iCACA,wBAAO/D,UAAWT,KAAKyE,gBAAvB,UACI,gCACA,+BACI,qBAAIJ,QAAS,kBAAM,EAAKK,UAAU,WAAlC,oBAAqD1E,KAAK2E,mBAAmB,aAC7E,qBAAIN,QAAS,kBAAM,EAAKK,UAAU,QAAlC,iBAA+C1E,KAAK2E,mBAAmB,UACvE,qBAAIN,QAAS,kBAAM,EAAKK,UAAU,QAAlC,iBAA+C1E,KAAK2E,mBAAmB,UACvE,qBAAIN,QAAS,kBAAM,EAAKK,UAAU,SAAlC,kBAAiD1E,KAAK2E,mBAAmB,WACzE,qBAAIN,QAAS,kBAAM,EAAKK,UAAU,QAAlC,iBAA+C1E,KAAK2E,mBAAmB,UACvE,qBAAIN,QAAS,kBAAM,EAAKK,UAAU,SAAlC,kBAAiD1E,KAAK2E,mBAAmB,gBAG7E,gCACC3E,KAAKoB,wBAAwBsB,KAAI,SAAAd,GAC9B,OAAQ,cAAC,EAAD,CACiBlC,WAAYkC,EAAalC,WACzBa,aAAcqB,EAAarB,cAFtBqB,EAAalC,WAAWoC,mB,GApQjDnB,IAAMC,WCQpBgE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.23a8f5bc.chunk.js","sourcesContent":["export class TickerValue {\n    public ask: string = '-';\n    public bid: string = '-';\n    public last: string = '-';\n    public open: string = '-';\n    public low: string = '-';\n    public high: string = '-';\n    public volume: string = '-';\n    public volumeQuote: string = '-';\n    public timestamp: string = '-';\n    public symbol: string;\n}","export class QuotationStringState {\n    public bidChangedUp: boolean = false;\n    public askChangedUp: boolean = false;\n    public highChangedUp: boolean = false;\n    public lowChangedUp: boolean = false;\n    public lastChangedUp: boolean = false;\n    public bidChangedDown: boolean = false;\n    public askChangedDown: boolean = false;\n    public highChangedDown: boolean = false;\n    public lowChangedDown: boolean = false;\n    public lastChangedDown: boolean = false;\n}","import React from 'react';\nimport {CurrencyItem} from \"./types/currency-item\";\nimport './QuotationString.css';\nimport {QuotationStringState} from \"./types/quotation-string-state\";\n\nclass QuotationString extends React.Component<CurrencyItem, QuotationStringState> {\n\n    private label: string;\n\n    private prevValue: any = null;\n\n    constructor(props: CurrencyItem) {\n        super(props);\n\n        this.resetState();\n\n        this.label = this.props.symbolData.baseCurrency + '/' + this.props.symbolData.quoteCurrency;\n    }\n\n    componentDidUpdate(prevProps: any) {\n        if (JSON.stringify(this.props) !== JSON.stringify(prevProps)) {\n            this.detectChanges(this.props, prevProps);\n\n            setTimeout(() => {\n                this.resetState();\n                this.setState(this.state);\n            }, 200);\n        }\n    }\n\n    resetState() {\n        this.state = new QuotationStringState();\n    }\n\n    detectChanges(currentProps: CurrencyItem, prevProps: CurrencyItem) {\n        this.setState({\n            bidChangedUp: parseFloat(currentProps.currentValue.bid) > parseFloat(prevProps.currentValue.bid),\n            askChangedUp: parseFloat(currentProps.currentValue.ask) > parseFloat(prevProps.currentValue.ask),\n            highChangedUp: parseFloat(currentProps.currentValue.high) > parseFloat(prevProps.currentValue.high),\n            lowChangedUp: parseFloat(currentProps.currentValue.low) > parseFloat(prevProps.currentValue.low),\n            lastChangedUp: parseFloat(currentProps.currentValue.last) > parseFloat(prevProps.currentValue.last),\n            bidChangedDown: parseFloat(currentProps.currentValue.bid) < parseFloat(prevProps.currentValue.bid),\n            askChangedDown: parseFloat(currentProps.currentValue.ask) < parseFloat(prevProps.currentValue.ask),\n            highChangedDown: parseFloat(currentProps.currentValue.high) < parseFloat(prevProps.currentValue.high),\n            lowChangedDown: parseFloat(currentProps.currentValue.low) < parseFloat(prevProps.currentValue.low),\n            lastChangedDown: parseFloat(currentProps.currentValue.last) < parseFloat(prevProps.currentValue.last)\n        });\n    }\n\n    checkIfComponentChanged() {\n        return JSON.stringify(this.props.currentValue) !== JSON.stringify(this.prevValue);\n    }\n\n    getPropClassName(propName: string)\n    {\n        if (propName === 'bid') {\n            if (this.state.bidChangedUp) {\n                return \"changed-up\";\n            }\n\n            if (this.state.bidChangedDown) {\n                return \"changed-down\";\n            }\n        }\n\n        if (propName === 'ask') {\n            if (this.state.askChangedUp) {\n                return \"changed-up\";\n            }\n\n            if (this.state.askChangedDown) {\n                return \"changed-down\";\n            }\n        }\n\n        if (propName === 'high') {\n            if (this.state.highChangedUp) {\n                return \"changed-up\";\n            }\n\n            if (this.state.highChangedDown) {\n                return \"changed-down\";\n            }\n        }\n\n        if (propName === 'low') {\n            if (this.state.lowChangedUp) {\n                return \"changed-up\";\n            }\n\n            if (this.state.lowChangedDown) {\n                return \"changed-down\";\n            }\n        }\n\n        if (propName === 'last') {\n            if (this.state.lastChangedUp) {\n                return \"changed-up\";\n            }\n\n            if (this.state.lastChangedDown) {\n                return \"changed-down\";\n            }\n        }\n\n        return \"\";\n    }\n\n    render() {\n        return (<tr>\n            <td>{this.label}</td>\n            <td className={this.getPropClassName('bid')}>{this.props.currentValue.bid ? this.props.currentValue.bid : '-'}</td>\n            <td className={this.getPropClassName('ask')}>{this.props.currentValue.ask ? this.props.currentValue.ask : '-'}</td>\n            <td className={this.getPropClassName('high')}>{this.props.currentValue.high ? this.props.currentValue.high : '-'}</td>\n            <td className={this.getPropClassName('low')}>{this.props.currentValue.low ? this.props.currentValue.low : '-'}</td>\n            <td className={this.getPropClassName('last')}>{this.props.currentValue.last ? this.props.currentValue.last : '-'}</td>\n        </tr>);\n    }\n}\n\nexport default QuotationString;","import {TickerValue} from \"./ticker-value\";\nimport {SymbolDataItem} from \"./symbol-data-item\";\n\nexport class CurrencyItem {\n    public symbolData: SymbolDataItem;\n    public currentValue: TickerValue;\n}\n","export class SortState {\n    public sortColumn: string = null;\n    public sortDirectionUp: boolean = true;\n}","import React from 'react';\nimport {TickerValue} from \"./types/ticker-value\";\nimport QuotationString from './QuotationString';\nimport {CurrencyItem} from \"./types/currency-item\";\nimport {SortState} from \"./types/sort-state\";\n\nclass QuotationTable extends React.Component {\n\n    private socketConnection: WebSocket = null;\n    private currenciesList: CurrencyItem[] = [];\n    private currenciesListToDisplay: CurrencyItem[] = [];\n    private timerID: any;\n\n    private currentSort: SortState;\n    private colorState: string = null;\n\n    private sliceCurrenciesByLastNumber: number = null;\n\n    constructor(props: any) {\n        super(props);\n        this.state = null;\n        this.currentSort = new SortState();\n    }\n\n    async componentDidMount() {\n\n        await this.initSocketConnection();\n\n        this.currenciesList = await this.getCurrenciesList();\n\n        this.currenciesList.forEach((currencyItem: CurrencyItem) => {\n            this.sendSubscribeRequest({\n                    \"method\": \"subscribeTicker\",\n                    \"params\": {\n                        \"symbol\": currencyItem.symbolData.id\n                    },\n                    \"id\": 123\n                }, (data: any) => {\n\n                    let messageData = JSON.parse(data.data).params as TickerValue;\n\n                    if (messageData !== undefined) {\n\n                        this.currenciesList.forEach(currencyItem => {\n                            if (currencyItem.symbolData.id === messageData.symbol) {\n                                currencyItem.currentValue = messageData;\n                            }\n                        });\n                    }\n                }\n            );\n        });\n\n        this.timerID = setInterval(\n            () => this.tick(),\n            200\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    async getCurrenciesList() {\n        let currenciesResponse = await this.sendDataRequest({\n            \"method\": \"getSymbols\",\n            \"params\": {\n                \"symbol\": \"ETHBTC\"\n            },\n            \"id\": 123\n        });\n\n        let currenciesList = (currenciesResponse as any).result;\n\n        return currenciesList.map((currencyObject: any) => {\n            const item = new CurrencyItem();\n            item.symbolData = currencyObject;\n            item.currentValue = new TickerValue();\n            item.currentValue.symbol = currencyObject.id;\n            return item;\n        });\n    }\n\n    async initSocketConnection() {\n\n        return new Promise((resolve, reject) => {\n            this.socketConnection = new WebSocket('wss://api.exchange.bitcoin.com/api/2/ws');\n\n            this.socketConnection.addEventListener('error', (event) => {\n                console.error(event);\n            });\n\n            this.socketConnection.onopen = () => {\n                resolve(this.socketConnection)\n            };\n            this.socketConnection.onclose = (error) => {\n                reject(error)\n            };\n        });\n    }\n\n    async sendDataRequest(requestObject: any) {\n        return new Promise((resolve, reject) => {\n            this.socketConnection.onmessage = (message) => {\n                resolve(JSON.parse(message.data))\n            };\n            this.socketConnection.onerror = (error) => {\n                reject(error)\n            };\n\n            this.socketConnection.send(JSON.stringify(requestObject));\n        });\n    }\n\n    sendSubscribeRequest(requestObject: any, handlerFn: any) {\n        this.socketConnection.onmessage = (data) => {\n            handlerFn(data)\n        };\n        this.socketConnection.send(JSON.stringify(requestObject));\n    }\n\n    tick() {\n\n        if (this.sliceCurrenciesByLastNumber > 0) {\n            this.currenciesListToDisplay = this.sliceCurrenciesListByLast(this.sliceCurrenciesByLastNumber);\n        } else {\n            this.currenciesListToDisplay = this.currenciesList;\n        }\n\n        this.sortCurrenciesListByCurrentSort();\n\n        this.setState(this.currenciesList);\n    }\n\n    sliceCurrenciesListByLast(size: number) {\n        this.currenciesList.sort((a, b) => {\n            if (parseFloat(a.currentValue.last) > parseFloat(b.currentValue.last)) {\n                return -1;\n            } else {\n                return 1;\n            }\n        });\n\n        return this.currenciesList.slice(0, size);\n    }\n\n    sortCurrenciesListByCurrentSort() {\n\n        this.currenciesListToDisplay.sort((a, b) => {\n            if (this.currentSort.sortColumn === 'ticker') {\n                if (a.currentValue.symbol > b.currentValue.symbol) {\n                    return this.currentSort.sortDirectionUp ? 1 : -1;\n                } else {\n                    return this.currentSort.sortDirectionUp ? -1 : 1;\n                }\n            }\n\n            if (this.currentSort.sortColumn === 'bid') {\n                if (parseFloat(a.currentValue.bid) > parseFloat(b.currentValue.bid)) {\n                    return this.currentSort.sortDirectionUp ? 1 : -1;\n                } else {\n                    return this.currentSort.sortDirectionUp ? -1 : 1;\n                }\n            }\n\n            if (this.currentSort.sortColumn === 'ask') {\n                if (parseFloat(a.currentValue.ask) > parseFloat(b.currentValue.ask)) {\n                    return this.currentSort.sortDirectionUp ? 1 : -1;\n                } else {\n                    return this.currentSort.sortDirectionUp ? -1 : 1;\n                }\n            }\n\n            if (this.currentSort.sortColumn === 'high') {\n                if (parseFloat(a.currentValue.high) > parseFloat(b.currentValue.high)) {\n                    return this.currentSort.sortDirectionUp ? 1 : -1;\n                } else {\n                    return this.currentSort.sortDirectionUp ? -1 : 1;\n                }\n            }\n\n            if (this.currentSort.sortColumn === 'low') {\n                if (parseFloat(a.currentValue.low) > parseFloat(b.currentValue.low)) {\n                    return this.currentSort.sortDirectionUp ? 1 : -1;\n                } else {\n                    return this.currentSort.sortDirectionUp ? -1 : 1;\n                }\n            }\n\n            if (this.currentSort.sortColumn === 'last') {\n                if (parseFloat(a.currentValue.last) > parseFloat(b.currentValue.last)) {\n                    return this.currentSort.sortDirectionUp ? 1 : -1;\n                } else {\n                    return this.currentSort.sortDirectionUp ? -1 : 1;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    setSortBy(colName: string) {\n\n        if (this.currentSort.sortColumn === colName) {\n            this.currentSort.sortDirectionUp = !this.currentSort.sortDirectionUp;\n        }\n\n        this.currentSort.sortColumn = colName;\n    }\n\n    getColumnSortArrow(colName: string) {\n        if (colName === this.currentSort.sortColumn) {\n\n            if (this.currentSort.sortDirectionUp) {\n                return '▲';\n            }\n\n            return '▼';\n        }\n\n        return '';\n    }\n\n    getTableClass() {\n        if (this.colorState === \"light\") {\n            return \"\";\n        }\n\n        return \"wrap-colors\";\n    }\n\n    wrapColors() {\n        if (this.colorState === \"light\") {\n            this.colorState = \"dark\";\n        } else {\n            this.colorState = \"light\";\n        }\n    }\n\n    setShowAll() {\n        this.sliceCurrenciesByLastNumber = null;\n    }\n\n    setShowTop50ByLast() {\n        this.sliceCurrenciesByLastNumber = 50;\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={()=>this.wrapColors()}>Wrap colors</button>\n                <button onClick={()=>this.setShowAll()}>Show all</button>\n                <button onClick={()=>this.setShowTop50ByLast()}>Show top 50 by Last</button>\n                <table className={this.getTableClass()}>\n                    <thead>\n                    <tr>\n                        <th onClick={() => this.setSortBy('ticker')}>Ticker {this.getColumnSortArrow('ticker')}</th>\n                        <th onClick={() => this.setSortBy('bid')}>Bid {this.getColumnSortArrow('bid')}</th>\n                        <th onClick={() => this.setSortBy('ask')}>Ask {this.getColumnSortArrow('ask')}</th>\n                        <th onClick={() => this.setSortBy('high')}>High {this.getColumnSortArrow('high')}</th>\n                        <th onClick={() => this.setSortBy('low')}>Low {this.getColumnSortArrow('low')}</th>\n                        <th onClick={() => this.setSortBy('last')}>Last {this.getColumnSortArrow('last')}</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.currenciesListToDisplay.map(currencyItem => {\n                        return (<QuotationString key={currencyItem.symbolData.id}\n                                                 symbolData={currencyItem.symbolData}\n                                                 currentValue={currencyItem.currentValue}></QuotationString>)\n                    })}\n                    </tbody>\n                </table>\n            </div>);\n    }\n}\n\nexport default QuotationTable;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuotationTable from './QuotationTable';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuotationTable />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}